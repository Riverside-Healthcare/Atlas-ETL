<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts" DTS:refId="Package" DTS:CreationDate="3/22/2019 10:12:33 AM" DTS:CreationName="Microsoft.Package" DTS:CreatorComputerName="WS3865" DTS:CreatorName="YOURORGNAME\eric-shultz" DTS:DTSID="{8A51CD3F-D59F-45C3-BFE4-49C7D24C9457}" DTS:EnableConfig="True" DTS:ExecutableType="Microsoft.Package" DTS:LastModifiedProductVersion="15.0.2000.152" DTS:LocaleID="1033" DTS:ObjectName="ETL-Merge" DTS:PackageType="5" DTS:VersionBuild="530" DTS:VersionGUID="{F8BFA02F-1213-4D52-A4B2-597A594327B1}">
  <DTS:Property DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager DTS:refId="Package.ConnectionManagers[atlas_database.atlas]" DTS:CreationName="OLEDB" DTS:DTSID="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" DTS:ObjectName="atlas_database.atlas">
      <DTS:PropertyExpression DTS:Name="InitialCatalog">@[$Package::Data_Governance_InitialCatalog]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager DTS:ConnectionString="Data Source=ssrs_database;Initial Catalog=atlas;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;"/>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager DTS:refId="Package.ConnectionManagers[atlas_database.atlas_staging]" DTS:CreationName="OLEDB" DTS:DTSID="{33DD8A07-CCB7-40C7-BBD6-678CBDB78BAD}" DTS:ObjectName="atlas_database.atlas_staging">
      <DTS:PropertyExpression DTS:Name="InitialCatalog">@[$Package::DG_Staging_InitialCatalog]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager DTS:ConnectionString="Data Source=ssrs_database;Initial Catalog=atlas_staging;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;"/>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager DTS:refId="Package.ConnectionManagers[ssrs_database.EpicReportLibrary]" DTS:CreationName="OLEDB" DTS:DTSID="{818e0d4b-8a27-4e1b-96a5-61be8cd25b9b}" DTS:ObjectName="ssrs_database.EpicReportLibrary">
      <DTS:ObjectData>
        <DTS:ConnectionManager DTS:ConnectionString="Data Source=ssrs_database;Initial Catalog=EpicReportLibrary;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;"/>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Configurations>
    <DTS:Configuration DTS:ConfigurationString="R:\Data Governance ETL\Settings.dtsConfig" DTS:ConfigurationType="1" DTS:CreationName="" DTS:DTSID="{83E81AAF-A5CB-4D60-9743-35616E0F2641}" DTS:ObjectName="Atlas ETL Settings"/>
  </DTS:Configurations>
  <DTS:PackageParameters>
    <DTS:PackageParameter DTS:CreationName="" DTS:DataType="8" DTS:Description="Set the DG database (prd, _Dev, or _Dev_Test)" DTS:DTSID="{ECCAA4B5-207F-4D9E-BAF5-68ECEB5EE1C4}" DTS:ObjectName="Data_Governance_InitialCatalog">
      <DTS:Property DTS:DataType="8" DTS:Name="ParameterValue">atlas</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter DTS:CreationName="" DTS:DataType="8" DTS:Description="Set the DG Stage database (prd, or _Test)" DTS:DTSID="{B569B24F-0DAB-4BE6-93C1-F927C5A85D19}" DTS:ObjectName="DG_Staging_InitialCatalog">
      <DTS:Property DTS:DataType="8" DTS:Name="ParameterValue">atlas_staging</DTS:Property>
    </DTS:PackageParameter>
    <DTS:PackageParameter DTS:CreationName="" DTS:DataType="8" DTS:DTSID="{ADCB400A-0024-493F-884E-FE18EB972780}" DTS:ObjectName="Org_AD_Name">
      <DTS:Property DTS:DataType="8" DTS:Name="ParameterValue">YOURORGNAME</DTS:Property>
    </DTS:PackageParameter>
  </DTS:PackageParameters>
  <DTS:Variables/>
  <DTS:Executables>
    <DTS:Executable DTS:refId="Package\Add Index" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:Description="Add Index" DTS:DTSID="{4DCFA3C4-7358-4615-B2E7-E00FAF2088B9}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Add Index" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{33DD8A07-CCB7-40C7-BBD6-678CBDB78BAD}" SQLTask:SqlStatementSource="CREATE INDEX [IX_ReportObjectUser_UserID_F01EA] ON [atlas_staging].[stage].[ReportObjectUser] ([UserID]) INCLUDE ([Username], [AccountName], [FullName], [FirstName])"/>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Clean Users" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{e50c94dc-3fe1-4d17-b89b-c74c8ae1fadf}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Clean Users" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{33DD8A07-CCB7-40C7-BBD6-678CBDB78BAD}" SQLTask:SqlStatementSource="&#10;DECLARE @SQL nvarchar(max);&#10;DECLARE @ORG_AD_NAME VARCHAR(100);&#10;SELECT @ORG_AD_NAME =?;&#10;SELECT @SQL =  '&#10;&#10;DROP FUNCTION if exists dbo.Username__ProperCase&#10;DROP FUNCTION if exists dbo.Username__Fullname&#10;DROP FUNCTION if exists dbo.Username__Firstname&#10;'&#10;exec sp_executesql @SQL&#10;&#10;SELECT @SQL =  '&#10;Create FUNCTION [dbo].[Username__ProperCase](@string VARCHAR(255)) RETURNS VARCHAR(255)&#10;AS&#10;begin&#10;  set @string = Upper(@string);&#10;  DECLARE @i INT           -- index&#10;  DECLARE @l INT           -- input length&#10;  DECLARE @c NCHAR(1)      -- current char&#10;  DECLARE @f INT           -- first letter flag (1/0)&#10;  DECLARE @o VARCHAR(255)  -- output string&#10;  DECLARE @w VARCHAR(10)   -- characters considered as white space&#10;&#10;  SET @w = ''['' + CHAR(13) + CHAR(10) + CHAR(9) + CHAR(160) + '' '' + '']''&#10;  SET @i = 1&#10;  SET @l = LEN(@string)&#10;  SET @f = 1&#10;  SET @o = ''''&#10;&#10;  WHILE @i &lt;= @l&#10;  BEGIN&#10;    SET @c = SUBSTRING(@string, @i, 1)&#10;    IF @f = 1 &#10;    BEGIN&#10;     SET @o = @o + @c&#10;     SET @f = 0&#10;    END&#10;    ELSE&#10;    BEGIN&#10;     SET @o = @o + LOWER(@c)&#10;    END&#10;&#10;    IF @c LIKE @w SET @f = 1&#10;&#10;    SET @i = @i + 1&#10;  END&#10;&#10;  RETURN @o&#10;END&#10;'&#10;exec sp_executesql @SQL&#10;&#10;SELECT @SQL =  '&#10;Create FUNCTION [dbo].Username__Fullname(@string VARCHAR(255)) RETURNS VARCHAR(255)&#10;AS&#10;begin&#10;  -- fix student names (s.John Doe)&#10;  set @string = replace(@string, ''s.'', '''')&#10;  return case&#10;&#9;&#9;&#9;-- names like &quot;Doe, John M&quot;&#10;&#9;&#9;&#9;when charindex('','', @string) &gt; 0 then rtrim(ltrim(dbo.Username__ProperCase(parsename(replace(replace(lower(@string), '', '', '',''),'','', ''.''),1)) + '' '' + dbo.Username__ProperCase(parsename(replace(replace(lower(@string), '', '', '',''),'','', ''.''),2))))&#10;&#9;&#9;&#10;&#9;&#9;&#9;-- names like &quot;MYORG\john-doe&quot;&#10;&#9;&#9;&#9;when @string like ''' + @ORG_AD_NAME + '\%'' then rtrim(ltrim(dbo.Username__ProperCase(parsename(replace(replace(lower(@string), ''' + @ORG_AD_NAME + '\'', ''''),''-'', ''.''),2)) + '' '' + dbo.Username__ProperCase(parsename(replace(replace(lower(@string), ''' + @ORG_AD_NAME + '\'', ''''),''-'', ''.''),1))))&#10;&#10;when charindex(''-'', @string) &gt; 0 then rtrim(ltrim(dbo.Username__ProperCase(parsename(replace(lower(@string),''-'', ''.''),2)) + '' '' + dbo.Username__ProperCase(parsename(replace(lower(@string), ''-'', ''.''),1))))&#10;&#10;&#10;&#9;&#9;&#9;else rtrim(ltrim(dbo.Username__ProperCase(@string)))&#10;&#9;&#9;end&#10;END&#10;'&#10;exec sp_executesql @SQL&#10;&#10;SELECT @SQL =  '&#10;Create FUNCTION [dbo].Username__Firstname(@string VARCHAR(255)) RETURNS VARCHAR(255)&#10;AS&#10;begin&#10;  set @string = dbo.Username__Fullname(@string);&#10;&#10;  return case when charindex('' '', @string) &gt; 0 then substring(@string,0,charindex('' '', @string))&#10;         else @string end&#10;END&#10;'&#10;exec sp_executesql @SQL&#10;&#10;SELECT @SQL =  '&#10;&#10;&#10;update stage.ReportObjectUser&#10;set Fullname_calc = t.fullname_calc,&#10;    Firstname_calc = t.firstname_calc&#10;&#10;from &#10;(&#10;select&#10;u.userid,&#10;case when fullname IS NOT NULL then replace(fullname, ''s.'', '''')&#10;&#9;when username is not null then dbo.Username__Fullname(username)&#10;&#9;when accountname is not null then dbo.Username__Fullname(username) end fullname_calc,&#10;&#10;case when FirstName IS NOT NULL then FirstName&#10;&#9;when username is not null then dbo.Username__Firstname(username)&#10;&#9;when accountname is not null then dbo.Username__Firstname(username) end firstname_calc&#10;from &#10;stage.ReportObjectUser u&#10;) as t where t.userid = stage.ReportObjectUser.userid&#10;&#10;-- cleanup&#10;DROP FUNCTION if exists dbo.Username__ProperCase&#10;DROP FUNCTION if exists dbo.Username__Fullname&#10;DROP FUNCTION if exists dbo.Username__Firstname&#10;&#10;&#10;;'&#10;exec sp_executesql @SQL&#10;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Org_AD_Name" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Cubes Run Link" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:Description="Execute SQL Task" DTS:DTSID="{22d053b4-b7a1-4d4c-83ee-0d6c9c7c3b72}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Cubes Run Link" DTS:ThreadHint="3">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="update ReportObject&#10;set ReportObjectURL=CONCAT('/data/File?handler=Cube&amp;id=', ReportObjectID)&#10;from dbo.reportobject&#10;where ReportObjectTypeID=42 and OrphanedReportObjectYN='N'&#10;;&#10;update ReportObject&#10;set DefaultVisibilityYN='Y'&#10;from dbo.reportobject&#10;where ReportObjectTypeID=42 and OrphanedReportObjectYN='N'"/>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\EpicReleased" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{E1CF8627-A0DB-423E-AA50-0DF751A67AB4}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="EpicReleased" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="update r &#10;set r.EpicReleased='Y'&#10;from dbo.reportobject r&#10;where ((r.EpicMasterFile='HGR' and EpicRecordID&lt;100000)&#10;or (r.EpicMasterFile='IDM' and EpicRecordID&lt;100000)&#10;or (r.EpicMasterFile='IDB' and EpicRecordID&lt;100000)&#10;or (r.EpicMasterFile='IDK' and EpicRecordID&lt;1000000)&#10;or (r.EpicMasterFile='IDN' and EpicRecordID&lt;1000000)) &#10;and r.RepositoryDescription is not null"/>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Hide Reports" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{0d53c483-8040-414e-b3fb-fcfe084d8664}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Hide Reports" DTS:ThreadHint="3">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @SQL nvarchar(max);&#10;SELECT @DG_DB =?;&#10;Set @SQL = 'use ' + @DG_DB;&#10;exec Sp_executesql @SQL&#10;&#10;Declare @Months varchar(100) = (select top(1) cast([Value] as int) from app.globalsitesettings where [Name] = 'Default Visibiliy Time' and isNumeric([Value]) = 1);&#10;&#10;if @Months &gt; 0&#10;&#10;&#9;Set @SQL = 'use ' + @DG_DB + ';&#10;&#9;select count(1) from ' + @DG_DB + '.dbo.ReportObjectRunData'&#10;&#10;&#9;exec Sp_executesql @SQL&#10;&#10;&#9;-- only hide reports if there is run data present.&#10;&#9;-- @@rowcount can only be accesed 1 time and is cleared&#10;&#9;if @@ROWCOUNT &gt; 0&#10;&#9;&#9;Set @SQL = '&#10;&#9;&#9;update ro &#10;&#9;&#9;set DefaultVisibilityYN = ''N'', LastLoadDate = GetDate()&#10;&#9;&#9;&#10;&#9;&#9;&#9;from  ' + @DG_DB + '.dbo.ReportObject ro&#10;&#9;&#9;  where DefaultVisibilityYN = ''Y''&#10;&#9;&#9;  and OrphanedReportObjectYN = ''N''&#10;&#9;&#9;  and reportobjecttypeid &lt;&gt; 23 and reportobjecttypeid &lt;&gt; 42&#10;&#9;&#9;   and (select count(1) from ' + @DG_DB + '.dbo.ReportObjectRunDataBridge b&#10;&#9;&#9;  inner join ' + @DG_DB + '.dbo.ReportObjectRunData d on b.RunId = d.RunDataId&#10;&#9;&#9;  where b.ReportObjectID = ro.reportobjectid&#10;&#9;&#9;  and RunStartTime &gt; Dateadd(month,-' + @Months + ',getdate()))  = 0&#10;&#9;&#9;  and not  exists (select * from ' + @DG_DB + '.app.ReportObject_doc d where d.ReportObjectID = ro.ReportObjectID and DoNotPurge = ''Y'')&#10;&#9;&#9;  and ReportObjectTypeID in (select ReportObjectTypeID from ' + @DG_DB + '.dbo.reportobjecttype where visible = ''Y'')&#10;&#9;&#9;  and ((ReportObjectTypeID &lt;&gt; 21 and coalesce(lastmodifieddate, &#10;&#9;&#9;&#9;&#9;(select coalesce(CreatedDateTime, d.lastupdatedatetime) from app.ReportObject_doc d where ro.reportObjectid = d.reportObjectid ),&#10;&#9;&#9;&#9;&#9;Dateadd(month,-2,getdate())) &lt; Dateadd(month,-1,getdate())) or ReportObjectTypeID = 21)&#10;&#9;&#9;  '&#10;&#9;&#9;  &#10;&#9;&#9;  &#10;&#9;&#9;exec (@SQL)&#10;&#10;-- for children with parents that are not visible&#10;&#10;set @sql = ' use ' + @DG_DB + ';&#10;update ReportObject&#10;set ReportObject.DefaultVisibilityYN = ''N''&#10;from ReportObject r &#10;-- visible reports&#10;where r.DefaultVisibilityYN = ''Y''&#10;-- that have parents&#10;and (&#10;&#9;select count(1) from ReportObjectHierarchy h &#10;&#9;where  r.ReportObjectID = h.ChildReportObjectID&#10;&#9;and h.ParentReportObjectID is not null&#10;&#9;) &gt; 0&#10;&#10;-- and none of the parents are visible&#10;and not exists (&#10;&#10;&#9;select * from ReportObjectHierarchy hcheck&#10;&#9;&#9;inner join ReportObject rpcheck on hcheck.ParentReportObjectID = rpcheck.ReportObjectID&#10;&#9;where rpcheck.DefaultVisibilityYN = ''Y''&#10;&#9;  and  hcheck.ChildReportObjectID = r.ReportObjectID&#10;&#9;)&#10;&#9;';&#10;exec (@SQL)&#10;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Attachments" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{32ff5ec1-1877-4ae8-bc07-ed88256cc94b}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Attachments" DTS:ThreadHint="4">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="&#10;DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;&#10;&#10;select @sql = '&#10;&#10;drop table if exists #report_attachments_temp;&#10;&#10;select reportobjectid&#10;             , a.[name]&#10;&#9;&#9;&#9; , a.path as [path]&#10;&#9;&#9;&#9; , a.creationdate&#10;&#9;&#9;&#9; , a.[type]&#10;&#9;&#9;&#9; , a.[source]&#10;&#9;&#9;&#9; , a.lastloaddate&#10;&#9;&#9;into #report_attachments_temp&#10;       from  ' + @DG_STAGE_DB + '.[stage].[ReportObjectAttachmentStaging]  a&#10;&#9;   inner join ' + @DG_DB + '.dbo.ReportObject r &#10;&#9;               on a.bizkey = r.ReportObjectBizKey&#10;&#10;merge ' + @DG_DB + '.dbo.ReportObjectAttachments as target&#10;&#10;using #report_attachments_temp as source&#10;&#10;on (source.[path] = target.[path] and &#10;   source.[creationdate] = target.[creationdate] and&#10;   source.[type] = target.[type] and&#10;   source.[source] = target.[source] and&#10;   source.[name] = target.[name] and&#10;   source.[reportobjectid] = target.[reportobjectid])&#10;&#10;when not matched by target then&#10;&#9;insert (reportobjectid, name, path, creationdate, source, type, lastloaddate)&#10;&#9;values (source.reportobjectid, source.[name], source.[path], source.creationdate, source.[source], source.[type], source.lastloaddate)&#10;&#10;when not matched by source then &#10;    delete;&#10;&#9;&#10;drop table if exists #report_attachments_temp;'&#10;&#10;EXEC sp_executesql @SQL&#10;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Groups" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{40CE37EC-A2F1-4C21-BB5F-943307552892}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Groups" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{33DD8A07-CCB7-40C7-BBD6-678CBDB78BAD}" SQLTask:SqlStatementSource="DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;DECLARE @ORG_AD_NAME VARCHAR(100);&#10;SELECT @DG_DB =?;&#10;SELECT @DG_STAGE_DB =?;&#10;SELECT @ORG_AD_NAME =?;&#10;&#10;-- groups&#10;&#10;select @sql = '&#10;drop table if exists #group_temp;&#10;&#10;select * into #group_temp from (&#10;select &#10;distinct &#10;g.AccountName&#10;, g.groupname&#10;, g.groupemail&#10;, g.grouptype&#10;, g.groupsource&#10;, g.EpicId&#10;from ' + @DG_STAGE_DB + '.stage.ReportObjectUserGroups g&#10;union &#10;select&#10;distinct&#10;null,groupname,null, grouptype, groupsource, cast(groupid as nvarchar)&#10;from ' + @DG_STAGE_DB + '.stage.ReportObjectGroupsMemberships&#10;where groupname != ''''&#10;) as t;&#10;&#10;&#9;MERGE ' + @DG_DB + '.dbo.UserGroups g USING #group_temp s&#10;&#9;ON  (isnull(g.GroupName, ''asdf'') = isnull(s.groupname,''asdf'')&#10;&#9;and isnull(g.GroupEmail,''asdf'') = isnull(s.GroupEmail,''asdf'')&#10;    and isnull(g.AccountName,''asdf'') = isnull(s.AccountName,''asdf'')&#10;&#9;and isnull(g.GroupType,''asdf'') = isnull(s.GroupType,''asdf'')&#10;and isnull(g.GroupSource,''asdf'') = isnull(s.GroupSource,''asdf'')&#10;&#9;and isnull(g.EpicId, ''asdf'') = isnull(s.EpicId, ''asdf''))&#10;WHEN NOT MATCHED by Target&#10;    THEN insert (AccountName,GroupName,GroupEmail,GroupType,GroupSource,LastLoadDate,EpicId)&#10;         values (s.AccountName,s.GroupName,s.GroupEmail,s.GroupType,s.groupsource,GetDate(),s.EpicId)&#10;WHEN NOT MATCHED by Source&#10;    and not exists (select * from  ' + @DG_DB + '.dbo.UserGroupsMembership m where g.groupid = m.groupid)&#10;    and not exists (select * from  ' + @DG_DB + '.dbo.ReportGroupsMemberships m where g.groupid = m.groupid)&#10;   Then delete&#10;;&#10;drop table if exists #group_temp;&#10;';&#10;&#10;exec sp_executesql @SQL;&#10;-- group memberships&#10;select @sql = '&#10;drop table if exists #group_memebership_temp;&#10;&#10;select distinct u.UserID, g.GroupId into #group_memebership_temp from &#10;&#9;( select &#10;&#9;&#9;g.AccountName&#10;&#9;&#9;, g.groupname&#10;&#9;&#9;, g.groupemail&#10;&#9;&#9;, g.grouptype&#10;&#9;&#9;, g.groupsource&#10;&#9;&#9;, g.EpicId&#10;&#9;&#9;, replace(case when g.username not like ''%\%'' and g.username not like ''%,%'' and g.username not like ''% %'' and g.username not like ''' + @ORG_AD_NAME + '\%'' then concat(''' + @ORG_AD_NAME + '\'', g.username) &#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;else g.username end,''\\'',''\'') as username&#10;&#10;&#9;&#9;from ' + @DG_STAGE_DB + '.stage.ReportObjectUserGroups g&#10;&#9;) as m&#10;&#9;inner join ' + @DG_DB + '.dbo.[User] u on m.username = u.username&#10;&#9;inner join ' + @DG_DB + '.dbo.UserGroups g on m.GroupName = g.GroupName and m.GroupSource=g.GroupSource and m.GroupType=g.GroupType and isnull(g.EpicId, ''asdf'') = isnull(m.EpicId, ''asdf'')&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#10;&#10;merge ' + @DG_DB + '.dbo.UserGroupsMembership m using #group_memebership_temp g&#10;&#9; on m.Userid = g.UserId&#10;&#9; and m.GroupId = g.GroupId&#10;when not matched by target&#10;&#9;then insert (UserId, GroupId, LastLoadDate)&#10;&#9;&#9; values (g.UserId, g.GroupId, GetDate())&#10;when not matched by source --and (select s.groupsource from  ' + @DG_DB + '.dbo.UserGroups s where s.groupid=m.groupid)=''LDAP''&#10;&#9;then delete;&#10;&#10;&#9;drop table if exists #group_memebership_temp;&#10;&#9;';&#10;&#10;&#9;exec sp_executesql @SQL;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="2" SQLTask:DtsVariableName="$Package::Org_AD_Name" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Hierarchies" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{af447675-aa3d-4c8e-b9da-613d0f32e8be}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Hierarchies" DTS:ThreadHint="5">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;&#10;&#10;&#10;exec('&#10;drop table if exists #report_hierarchy_temp;&#10;&#10;SELECT&#9;distinct parent.ReportObjectID&#9;as ParentReportObjectID&#10;&#9;&#9;,&#9;&#9;child.ReportObjectID&#9;as ChildReportObjectID&#10;&#9;&#9;,       map.Line&#9;&#9;&#9;&#9;&#10;&#9;&#9;into #report_hierarchy_temp&#10;&#9;&#9;FROM &#10;&#9;&#9;' + @DG_STAGE_DB + '.stage.ReportObjectHierarchyStaging map&#10;&#9;&#9;inner join ' + @DG_DB + '.dbo.ReportObject parent on parent.ReportObjectBizKey = map.ParentReportObjectBizKey&#10;&#9;&#9;inner join ' + @DG_DB + '.dbo.ReportObject child  on child.ReportObjectBizKey  = map.ChildReportObjectBizKey&#10;&#10;Merge ' + @DG_DB + '.dbo.ReportObjectHierarchy t&#10;using #report_hierarchy_temp as s&#10;on (&#10;     s.parentreportobjectid = t.parentreportobjectid&#10;   and s.childreportobjectid = t.childreportobjectid&#10;  &#10;   )&#10;   when matched and (t.line != s.line)&#10;   then update set&#10;&#9;t.line = s.line,&#10;&#9;t.LastLoadDate = GetDate()&#10;   &#10;when not matched by target&#10;&#9;then insert (&#10;&#9;&#9;&#9;&#9;&#9;ParentReportObjectID&#10;&#9;&#9;&#9;&#9;,&#9;ChildReportObjectID&#10;&#9;&#9;&#9;&#9;,   Line&#10;&#9;&#9;&#9;&#9;, LastLoadDate&#10;&#9;&#9;&#9;&#9;)&#10;&#9;&#9;values (s.parentreportobjectid, s.childreportobjectid, s.line, GetDate())&#10;when not matched by source&#10;&#9;then delete;&#10;&#10;drop table if exists #report_hierarchy_temp;&#10;&#9;')">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Queries" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{2EF45779-67EC-4D2F-90DE-0EF0D6B73868}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Queries" DTS:ThreadHint="6">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;&#10;&#10;&#10;select @sql = 'DELETE DUP&#10;FROM&#10;(&#10;&#160;SELECT ROW_NUMBER() OVER (PARTITION BY bizkey,query ORDER BY bizkey,query ) AS Val&#10;&#160;FROM ' + @DG_STAGE_DB + '.stage.ReportObjectQueryStaging&#10;) DUP&#10;WHERE DUP.Val &gt; 1;'&#10;EXEC sp_executesql @SQL&#10;&#10;SELECT @SQL = '&#10;drop table if exists #report_query_temp;&#10;&#10; select     &#10;     ro.reportobjectid&#10;    ,r.Query&#10;    ,r.LastLoadDate&#10;&#9;,ro.sourceserver&#10;&#9;,r.Language&#10;&#9;,r.Name&#10;&#9;into #report_query_temp&#10;    from            ' + @DG_STAGE_DB + '.stage.ReportObjectQueryStaging r&#10;    inner join ' + @DG_DB + '.dbo.ReportObject ro on ro.reportobjectbizkey = r.BizKey&#10;&#10;merge into ' + @DG_DB + '.dbo.ReportObjectQuery as target&#10;using #report_query_temp as source&#10;on source.ReportObjectID = target.ReportObjectID and source.query=target.query&#10;when matched and (target.LastLoadDate != source.LastLoadDate&#10;                  or target.sourceserver != source.sourceserver&#10;&#9;or target.Language != source.Language&#10;&#9;or target.Name != source.Name)&#10;&#9;then update set target.sourceserver = source.sourceserver&#10;&#9;&#9;&#9;&#9;  ,target.LastLoadDate = GetDate()&#10;&#9;&#9;&#9;&#9;,target.Language=source.Language&#10;&#9;&#9;&#9;&#9;,target.Name=source.Name&#10;when not matched by target then&#10;    insert (&#10;        [ReportObjectId]&#10;&#9;,   [Query]&#10;&#9;,   [LastLoadDate]&#10;    ,   [SourceServer]&#10;&#9;,[Language]&#10;&#9;,[Name]&#10;    )&#10;    values (&#10;               source.ReportObjectId, source.Query, GetDate(), source.SourceServer, source.Language, source.Name&#10;           )&#10;&#10;when not matched by source then delete;&#10;drop table if exists #report_query_temp;'&#10;&#10;EXEC sp_executesql @SQL&#10;&#10;select @sql = 'DELETE DUP&#10;FROM&#10;(&#10;&#160;SELECT ROW_NUMBER() OVER (PARTITION BY reportobjectid,query ORDER BY reportobjectid,query ) AS Val&#10;&#160;FROM ' + @DG_DB + '.dbo.reportobjectquery&#10;) DUP&#10;WHERE DUP.Val &gt; 1;'&#10;&#10;EXEC sp_executesql @SQL&#10;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Report Groups" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{f3ac92af-32c1-4f41-8670-c5541ebc7136}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Report Groups" DTS:ThreadHint="7">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;DECLARE @ORG_AD_NAME VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB =?;&#10;&#10;&#10;exec ('&#10;drop table if exists #report_group_memberships_temp;&#10;&#10;select distinct reportobjectid, dug.GroupId &#10;into #report_group_memberships_temp&#10;from ' + @DG_STAGE_DB + '.[stage].[ReportObjectGroupsMemberships] d&#10;&#9;&#9;join ' + @DG_DB + '.dbo.ReportObject r on d.bizkey = r.reportobjectbizkey&#10;&#9;&#9;join ' + @DG_DB + '.dbo.UserGroups dug on  dug.GroupName = d.GroupName and dug.GroupSource = d.groupsource and dug.GroupType = d.grouptype and dug.epicid=d.groupid&#10;&#10;merge  ' + @DG_DB + '.[dbo].ReportGroupsMemberships m&#10;using #report_group_memberships_temp g&#10;on (m.GroupId = g.GroupId and m.ReportId =g.ReportObjectId)&#10;when not matched by target&#10;&#9;then insert(GroupId,ReportId, LastLoadDate) values (g.GroupId, g.ReportObjectId, GetDate()) &#10;when not matched by source&#10;&#9;then delete;&#10;&#10;drop table if exists #report_group_memberships_temp;&#10;')">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Report Parameters" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{535b8791-0868-4d4a-ab77-a5d6ebc30f0a}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Report Parameters" DTS:ThreadHint="2">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB =?;&#10;&#10;&#10;&#10;exec ('&#10;drop table if exists #report_param_temp;&#10;&#10;select distinct reportobjectid, param.ParameterName, param.ParameterValue&#10;into #report_param_temp&#10;from ' + @DG_STAGE_DB + '.[stage].[ReportObjectParameters] param&#10;join ' + @DG_DB + '.dbo.ReportObject r on param.EpicRecordId=r.EpicRecordId and param.EpicMasterFile=r.EpicMasterFile&#10;&#10;merge  ' + @DG_DB + '.[dbo].ReportObjectParameters p&#10;using #report_param_temp g&#10;on (p.ParameterName = g.ParameterName and p.ReportObjectId =g.ReportObjectId and p.ParameterValue=g.ParameterValue)&#10;when not matched by target&#10;&#9;then insert(ReportObjectId,ParameterName, ParameterValue) values (g.ReportObjectId, g.ParameterName, g.ParameterValue) &#10;when not matched by source&#10;&#9;then delete;&#10;drop table if exists #report_param_temp;&#10;')">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Report Tag Memberships" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{d5ef615f-96b5-4294-81d4-6e182b0d8a4a}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Report Tag Memberships" DTS:ThreadHint="1">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;&#10;&#10;SELECT @SQL =  '&#10;drop table if exists #report_tag_membership_temp;&#10;&#10; select &#10;rt.ReportObjectID&#10;,t.TagID&#10;,r.Line&#10;into #report_tag_membership_temp&#10;    from            ' + @DG_STAGE_DB + '.stage.ReportObjectTagMemberships r&#10;&#9;inner join ' + @DG_DB + '.dbo.ReportObjectTags t on t.EpicTagID=r.Tag_ID&#10;&#9; inner join ' + @DG_DB + '.dbo.ReportObject rt on rt.ReportObjectBizKey = r.ReportObjectBizKey&#10;&#10;merge into ' + @DG_DB + '.dbo.ReportObjectTagMemberships as target&#10;using #report_tag_membership_temp as source&#10;on source.ReportObjectID = target.ReportObjectID and source.TagID=target.TagID&#10;&#10;when not matched by target then&#10;    insert (&#10;        [ReportObjectID]&#10;    ,   [TagID]&#10;    ,   [Line]&#10;    )&#10;    values (&#10;               source.ReportObjectID, source.TagID, source.Line&#10;           )&#10;when not matched by source then delete&#10;;&#10;drop table if exists #report_tag_membership_temp;&#10;'&#10;exec sp_executesql @SQL&#10;&#10;&#10;&#10;&#10;&#10;&#10;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Report Tags" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{9b10b9d1-6730-4ec6-82ec-706a9e928598}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Report Tags" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;&#10;SELECT @SQL = &#10;'&#10;drop table if exists #report_tags_temp;&#10;&#10;select distinct&#10;           r.tag_id as TagID&#10;    ,      r.tag_name   as TagName&#10;&#9;into #report_tags_temp&#10;    from ' + @DG_STAGE_DB + '.stage.ReportObjectTagsStaging r&#10;&#10;merge into ' + @DG_DB + '.dbo.ReportObjectTags as target&#10;using (&#10;    select distinct&#10;           r.tag_id as TagID&#10;    ,      r.tag_name   as TagName&#10;    from ' + @DG_STAGE_DB + '.stage.ReportObjectTagsStaging r&#10;) as source&#10;on (source.[TagName] = target.[TagName] and source.[TagID] = target.[EpicTagID])&#10;-- when matched and master file is not the same, update master file, &#10;-- when not present on target then insert,&#10;-- when not present on source then do nothing (don''t delete)&#10;when matched and target.EpicTagID != source.TagID then&#10;    update set &#10;&#9;&#9;target.EpicTagID = source.TagID&#10;when not matched by target then insert (EpicTagID, TagName)&#10;                                values (source.TagID, source.TagName);&#10;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#9;&#10;drop table if exists #report_tags_temp;&#10;'&#10;&#10;exec sp_executesql @SQL">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Report Types" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{245da10a-01fc-4108-aba5-e7e1bf860b08}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Report Types" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;&#10;&#10;SELECT @SQL = &#10;'drop table if exists #report_object_temp;&#10;&#10;select distinct&#10;           r.ReportObjectType as [Name]&#10;    ,      r.EpicMasterFile   as DefaultEpicMasterFile&#10;&#9;into #report_object_temp&#10;    from ' + @DG_STAGE_DB + '.stage.ReportObjectStaging r&#10;&#10;merge into ' + @DG_DB + '.dbo.ReportObjectType as target&#10;using #report_object_temp as source&#10;on source.[Name] = target.[Name]&#10;-- when matched and master file is not the same, update master file, &#10;-- when not present on target then insert,&#10;-- when not present on source then do nothing (don''t delete)&#10;when matched and target.DefaultEpicMasterFile != source.DefaultEpicMasterFile then&#10;    update set &#10;&#9;&#9;target.DefaultEpicMasterFile = source.DefaultEpicMasterFile,&#10;&#9;&#9;target.LastLoadDate = GetDate()&#10;when not matched by target then insert ([Name], DefaultEpicMasterFile, LastLoadDate)&#10;                                values (source.[Name], source.DefaultEpicMasterFile, GetDate());&#10;drop table if exists #report_object_temp;'&#10;&#10;exec sp_executesql @SQL">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Reports" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{d03cc307-3353-4620-9788-4a63a1cb660f}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Reports" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;&#10;&#10;SELECT @SQL =  '&#10;drop table if exists #report_temp;&#10;&#10; select   distinct       ReportObjectBizKey = concat(&#10;r.SourceServer&#10;,   ''||''&#10;,   r.SourceDB&#10;,   ''||''&#10;,   r.ReportObjectType&#10;,   ''||''&#10;,   r.ReportServerCatalogID&#10;,   ''||''&#10;,   r.EpicMasterFile&#10;,   ''||''&#10;,   r.EpicRecordID&#10;)&#10;,               r.SourceServer&#10;,               r.SourceDB&#10;,               r.SourceTable&#10;,               r.Name&#10;,               r.DisplayTitle&#10;,               r.Description&#10;,               r.DetailedDescription&#10;,               rt.ReportObjectTypeID&#10;,               (select min(UserId) from ' + @DG_DB + '.dbo.[User] author where author.Username = r.Author)  as AuthorUserID&#10;,               (select min(UserId) from ' + @DG_DB + '.dbo.[User] lastMod where lastMod.Username = r.LastModifiedBy) as LastModifiedByUserID&#10;,               r.LastModifiedDate&#10;,               r.ReportObjectURL&#10;,               r.EpicMasterFile&#10;,               r.EpicRecordID&#10;,&#9;&#9;&#9;&#9;r.ReportServerCatalogID&#10;,&#9;&#9;&#9;&#9;r.DefaultVisibilityYN&#10;,&#9;&#9;&#9;&#9;r.EpicReportTemplateId&#10;,&#9;&#9;&#9;&#9;r.ReportServerPath&#10;,&#9;&#9;&#9;&#9;isnull(r.Availability, ''Public'') as Availability&#10;into  #report_temp&#10;    from            ' + @DG_STAGE_DB + '.stage.ReportObjectStaging r&#10;    left outer join ' + @DG_DB + '.dbo.ReportObjectType rt on rt.Name = r.ReportObjectType&#10;&#10;merge into ReportObject as target&#10;using #report_temp as source&#10;on source.ReportObjectBizKey = target.ReportObjectBizKey&#10;-- when matched update&#10;-- when not matched insert&#10;-- when not matched by source update set orphan flag&#10;when matched and (target.Name != source.Name&#10;&#9;&#9;&#9;&#9;  or          isnull(target.DisplayTitle,''asdf'') != isnull(source.DisplayTitle,''asdf'')&#10;                  or         isnull(target.Description,''asdf'') != isnull(source.Description,''asdf'')&#10;                  or         isnull(target.DetailedDescription,''asdf'') != isnull(source.DetailedDescription,''asdf'')&#10;                  or         isnull(target.AuthorUserID,-1) != isnull(source.AuthorUserID,-1)&#10;                  or         isnull(target.LastModifiedByUserID,-1) != isnull(source.LastModifiedByUserID,-1)&#10;                  or         target.LastModifiedDate != source.LastModifiedDate&#10;&#9;&#9;&#9;&#9;  or&#9;&#9; isnull(target.ReportObjectURL,''asdf'') != isnull(source.ReportObjectURL,''asdf'')&#10;&#9;&#9;&#9;&#9;  or&#9;&#9; isnull(target.Availability,''asdf'') != source.Availability&#10;&#9;&#9;&#9;&#9;  or&#9;&#9; isnull(target.DefaultVisibilityYN,''N'') != isnull(source.DefaultVisibilityYN,''N'')&#10;&#9;&#9;&#9;&#9;  or&#9;     isnull(target.OrphanedReportObjectYN,''N'') != isnull(''N'',''N'')&#10;&#9;&#9;&#9;&#9;  or&#9;&#9; isnull(target.EpicReportTemplateId,-1) != isnull(source.EpicReportTemplateId,-1)&#10;&#9;&#9;&#9;&#9;  or&#9;&#9; isnull(target.ReportServerPath,''asdf'') != isnull(source.ReportServerPath,''asdf''))&#10;&#9;then update set target.Name = source.Name&#10;&#9;&#9;&#9;&#9;  ,          target.DisplayTitle = source.DisplayTitle&#10;                  ,          target.Description = source.Description&#10;                  ,          target.DetailedDescription = source.DetailedDescription&#10;                  ,          target.AuthorUserID = source.AuthorUserID&#10;                  ,          target.LastModifiedByUserID = source.LastModifiedByUserID&#10;                  ,          target.LastModifiedDate = source.LastModifiedDate&#10;&#9;&#9;&#9;&#9;  ,&#9;&#9;&#9; target.ReportObjectURL = source.ReportObjectURL&#10;&#9;&#9;&#9;&#9;  ,&#9;&#9;&#9; target.DefaultVisibilityYN = source.DefaultVisibilityYN&#10;&#9;&#9;&#9;&#9;  ,&#9;&#9;&#9; target.Availability = source.Availability&#10;&#9;&#9;&#9;&#9;  ,&#9;&#9;     target.OrphanedReportObjectYN = ''N''&#10;&#9;&#9;&#9;&#9;  ,&#9;&#9;&#9; target.EpicReportTemplateId = source.EpicReportTemplateId&#10;&#9;&#9;&#9;&#9;  ,&#9;&#9;&#9; target.ReportServerPath = source.ReportServerPath&#10;&#9;&#9;&#9;&#9;  ,          target.LastLoadDate = GetDate()&#10;when not matched by target then&#10;    insert (&#10;        [ReportObjectBizKey]&#10;    ,   [SourceServer]&#10;    ,   [SourceDB]&#10;    ,   [SourceTable]&#10;    ,   [Name]&#10;&#9;,   [DisplayTitle]&#10;    ,   [Description]&#10;    ,   [DetailedDescription]&#10;    ,   [ReportObjectTypeID]&#10;    ,   [AuthorUserID]&#10;    ,   [LastModifiedByUserID]&#10;    ,   [LastModifiedDate]&#10;    ,   [ReportObjectURL]&#10;    ,   [EpicMasterFile]&#10;    ,   [EpicRecordID]&#10;&#9;,&#9;[ReportServerCatalogID]&#10;&#9;,&#9;[DefaultVisibilityYN]&#10;&#9;,   [EpicReportTemplateId]&#10;&#9;,&#9;[ReportServerPath]&#10;&#9;,   [LastLoadDate]&#10;&#9;,   [Availability]&#10;    )&#10;    values (&#10;               source.ReportObjectBizKey, source.SourceServer, source.SourceDB, source.SourceTable, source.Name, source.DisplayTitle&#10;           ,   source.Description, source.DetailedDescription, source.ReportObjectTypeID, source.AuthorUserID&#10;           ,   source.LastModifiedByUserID, source.LastModifiedDate, source.ReportObjectURL, source.EpicMasterFile&#10;           ,   source.EpicRecordID, source.ReportServerCatalogID, source.DefaultVisibilityYN, source.EpicReportTemplateId&#10;&#9;&#9;   ,   source.ReportServerPath, GetDate(),source.Availability&#10;           )&#10;when not matched by source then update &#10;&#9;set &#10;&#9;&#9;target.OrphanedReportObjectYN = ''Y'',&#10;&#9;&#9;target.LastLoadDate = GetDate();&#10;&#9;&#9;&#10;drop table if exists #report_temp;'&#10;exec sp_executesql @SQL&#10;&#10;&#10;&#10;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Subscriptions" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{dc084651-dbcd-430f-95d0-05d5e18a6df6}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Subscriptions" DTS:ThreadHint="8">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:BypassPrepare="False" SQLTask:SqlStatementSource="DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;DECLARE @ORG_AD_NAME VARCHAR(100);&#10;SELECT @DG_DB = ?;&#10;SELECT @DG_STAGE_DB = ?;&#10;SELECT @ORG_AD_NAME = ?;&#10;&#10;exec ('&#10;drop table if exists #report_subscriptions_temp;&#10;&#10;SELECT distinct  r.ReportObjectID,&#10;&#9;u.UserId,&#10;&#9;ros.SubscriptionId,&#10;&#9;ros.InactiveFlags,&#10;&#9;ros.EmailList,&#10;&#9;ros.Description,&#10;&#9;ros.LastStatus,&#10;&#9;ros.LastRunTime,&#10;&#9;ros.SubscriptionTo&#10;&#9;into #report_subscriptions_temp&#10;&#9;FROM ' + @DG_STAGE_DB + '.[stage].[ReportObjectSubscriptions] ros&#10;&#9;left join ' + @DG_DB + '.[dbo].ReportObject r on ros.ReportObjectId = r.ReportServerCatalogId&#10;&#9;left outer join ' + @DG_DB + '.dbo.[User] u on REPLACE(ros.SubscriptionTo,''' + @ORG_AD_NAME + ''',''rhc'') = u.Email&#10;&#10;MERGE ' + @DG_DB + '.dbo.ReportObjectSubscriptions t&#10;using #report_subscriptions_temp as s&#10;on (t.ReportObjectId = s.reportobjectId&#10;&#9;and isnull(t.userId,999999) = isnull(s.userid,999999)&#10;&#9;and s.subscriptionid = t.subscriptionid&#10;&#9;and s.inactiveflags = t.inactiveflags&#10;&#9;and s.emaillist = t.emaillist&#10;&#9;and s.description = t.description&#10;&#9;and s.subscriptionto = t.subscriptionto)&#10;when matched and (s.laststatus != t.laststatus or s.lastruntime != t.lastruntime)&#10;&#9;then update&#10;&#9;&#9;set t.laststatus = s.laststatus, &#10;&#9;&#9;    t.lastruntime = s.lastruntime,&#10;&#9;&#9;&#9;t.lastloaddate = GetDate()&#10;When not matched by target&#10;&#9;then insert (&#10;&#9;&#9;&#9;&#9;&#9;[ReportObjectID]&#10;&#9;&#9;&#9;&#9;&#9;,[UserId]&#10;&#9;&#9;&#9;&#9;&#9;,[SubscriptionId]&#10;&#9;&#9;&#9;&#9;&#9;,[InactiveFlags]&#10;&#9;&#9;&#9;&#9;&#9;,[EmailList]&#10;&#9;&#9;&#9;&#9;&#9;,[Description]&#10;&#9;&#9;&#9;&#9;&#9;,[LastStatus]&#10;&#9;&#9;&#9;&#9;&#9;,[LastRunTime]&#10;&#9;&#9;&#9;&#9;&#9;,[SubscriptionTo]&#10;&#9;&#9;&#9;&#9;&#9;,[LastLoadDate]&#10;&#9;&#9;&#9;&#9;)&#10;&#9;&#9; values (s.reportobjectid&#10;&#9;&#9;&#9;&#9;,s.userId&#10;&#9;&#9;&#9;&#9;,s.subscriptionid&#10;&#9;&#9;&#9;&#9;,s.inactiveflags&#10;&#9;&#9;&#9;&#9;,s.emaillist&#10;&#9;&#9;&#9;&#9;,s.description&#10;&#9;&#9;&#9;&#9;,s.laststatus&#10;&#9;&#9;&#9;&#9;,s.lastruntime&#10;&#9;&#9;&#9;&#9;,s.subscriptionto&#10;&#9;&#9;&#9;&#9;,GetDate())&#10;when not matched by source&#10;&#9;then delete;&#10;&#10;drop table if exists #report_subscriptions_temp;&#10;')">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="2" SQLTask:DtsVariableName="$Package::Org_AD_Name" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Merge Users" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{ED62691A-DA57-4CEE-95F9-E42ADD449A64}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Merge Users" DTS:ThreadHint="0">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="&#10;DECLARE @SQL nvarchar(max);&#10;DECLARE @DG_DB VARCHAR(100);&#10;DECLARE @DG_STAGE_DB VARCHAR(100);&#10;DECLARE @ORG_AD_NAME VARCHAR(100);&#10;SELECT @DG_DB =?;&#10;SELECT @DG_STAGE_DB =?;&#10;SELECT @ORG_AD_NAME =?;&#10;&#10;-- load users&#10;&#10;select @sql = '&#10;drop table if exists #user_temp;&#10;&#10;select distinct&#10;replace(case when username not like ''%\%'' and username not like ''%,%'' and username not like ''% %'' and username not like ''' + @ORG_AD_NAME + '\%'' then concat(''' + @ORG_AD_NAME + '\'', l.username) &#10;else username end,''\\'',''\'') as Username&#10;, max(case when employeeid = '''' then null else employeeid end) as employeeid&#10;, max(case when displayname = '''' then null else case when username not like ''%,%'' and username not like ''% %'' then replace(replace(l.username,''\\'',''\''),''' + @ORG_AD_NAME + '\'','''' ) else username end end) as displayname&#10;, max(case when fullname = '''' then null else fullname end) as fullname&#10;, max(case when firstname = '''' then null else firstname end) as firstname&#10;, max(case when lastname = '''' then null else lastname end) as lastname&#10;, max(case when title = '''' then null else title end) as title&#10;, max(case when department = '''' then null else department end) as department&#10;, max(case when accountName = '''' then null else accountName end) as accountName&#10;, max(case when phone = '''' then null else phone end) as phone&#10;, max(case when email = '''' then null else email end) as email&#10;, max(case when Base = '''' then null else Base end) as Base&#10;, max(case when EpicId = '''' then null else EpicId end) as EpicId&#10;, max(case when Fullname_calc= '''' then null else Fullname_calc end) as Fullname_calc&#10;, max(case when Firstname_calc= '''' then null else Firstname_calc end) as Firstname_calc&#10;into #user_temp&#10;from  ' + @DG_STAGE_DB + '.[stage].[ReportObjectUser] l&#10;where replace(case when username not like ''%\%'' and  username not like ''%,%'' and username not like ''% %'' and username not like ''' + @ORG_AD_NAME + '\%'' then concat(''' + @ORG_AD_NAME + '\'', l.username) &#10;else username end,''\\'',''\'') is not null&#10;and username is not null&#10;and username != ''''&#10;group by replace(case when username not like ''%\%'' and  username not like ''%,%'' and username not like ''% %'' and username not like ''' + @ORG_AD_NAME + '\%'' then concat(''' + @ORG_AD_NAME + '\'', l.username) &#10;else username end,''\\'',''\'')&#10;&#10;MERGE ' + @DG_DB + '.dbo.[User] dgu USING #user_temp stgu&#10;ON lower(dgu.Username) = lower(stgu.Username)&#10;WHEN MATCHED and (isnull(dgu.EmployeeID,''asdf'') &lt;&gt; isnull(stgu.EmployeeID,''asdf'')&#10;        or isnull(dgu.AccountName,''asdf'') &lt;&gt; isnull(stgu.AccountName,''asdf'')&#10;        or isnull(dgu.DisplayName,''asdf'') &lt;&gt; isnull(stgu.DisplayName,''asdf'')&#10;        or isnull(dgu.FullName,''asdf'') &lt;&gt; isnull(stgu.FullName,''asdf'')&#10;        or isnull(dgu.FirstName,''asdf'') &lt;&gt; isnull(stgu.FirstName,''asdf'')&#10;        or isnull(dgu.LastName,''asdf'') &lt;&gt; isnull(stgu.LastName,''asdf'')&#10;        or isnull(dgu.Department,''asdf'') != isnull(stgu.Department,''asdf'')&#10;        or isnull(dgu.Title,''asdf'') != isnull(stgu.Title,''asdf'')&#10;        or isnull(dgu.Phone,''asdf'') != isnull(stgu.Phone,''asdf'')&#10;        or isnull(dgu.Email,''asdf'') != isnull(stgu.Email,''asdf'')&#10;        or isnull(dgu.EpicId,''asdf'') != isnull(stgu.EpicId,''asdf'')&#10;or isnull(dgu.Fullname_calc,''asdf'') != isnull(stgu.Fullname_calc,''asdf'')&#10;or isnull(dgu.Firstname_calc,''asdf'') != isnull(stgu.Firstname_calc,''asdf'')&#10;        or isnull(dgu.Base,''asdf'') != isnull(stgu.Base,''asdf''))&#10;    THEN update set&#10;                dgu.EmployeeID = stgu.EmployeeID,&#10;                dgu.AccountName = stgu.AccountName,&#10;                dgu.DisplayName = stgu.DisplayName,&#10;                dgu.FullName = stgu.FullName,&#10;                dgu.FirstName = stgu.FirstName,&#10;                dgu.LastName = stgu.LastName,&#10;                dgu.Department = stgu.Department,&#10;                dgu.Title = stgu.Title,&#10;                dgu.Phone = stgu.Phone,&#10;                dgu.Email = stgu.Email,&#10;                dgu.Base = stgu.Base,&#10;                dgu.Fullname_calc = stgu.Fullname_calc,&#10;                dgu.Firstname_calc = stgu.Firstname_calc,&#10;                dgu.EpicId = stgu.EpicId,&#10;                dgu.LastLoadDate = GetDate()&#10;WHEN NOT MATCHED by Target&#10;    THEN insert (Username,EmployeeID,AccountName,DisplayName,FullName,FirstName,LastName,Department,Title,Phone,Email,Base,Fullname_calc,Firstname_calc,EpicId, LastLoadDate)&#10;         values (stgu.username,stgu.EmployeeID,stgu.AccountName,stgu.DisplayName,stgu.FullName,stgu.FirstName,stgu.LastName,stgu.Department,stgu.Title,stgu.Phone,stgu.Email,stgu.Base,stgu.Fullname_calc,stgu.Firstname_calc, stgu.EpicId, GetDate())&#10;;&#10;drop table if exists #user_temp;&#10;'&#10;exec sp_executesql @SQL;">
          <SQLTask:ParameterBinding SQLTask:ParameterName="0" SQLTask:DtsVariableName="$Package::Data_Governance_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="1" SQLTask:DtsVariableName="$Package::DG_Staging_InitialCatalog" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
          <SQLTask:ParameterBinding SQLTask:ParameterName="2" SQLTask:DtsVariableName="$Package::Org_AD_Name" SQLTask:ParameterDirection="Input" SQLTask:DataType="130" SQLTask:ParameterSize="-1"/>
        </SQLTask:SqlTaskData>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Update Certification Tag" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:Description="Execute SQL Task" DTS:DTSID="{3762353c-3a8a-41f7-a75d-ef093dfe83bb}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Update Certification Tag" DTS:ThreadHint="3">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="declare @SQL nvarchar(max);&#10;&#10;select @SQL = isnull(value,'')&#10;from app.GlobalSiteSettings&#10;where name like 'report_tag_etl'&#10;&#10;exec sp_executesql @SQL"/>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Update Repo Description" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:Description="Execute SQL Task" DTS:DTSID="{1C32828C-E992-400E-89FC-45BE7B986E3A}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Update Repo Description" DTS:ThreadHint="0" DTS:Disabled="True">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="update r&#10;&#10;set RepositoryDescription = p.EpicDocumentation&#10;from dbo.ReportObject r&#10;inner join (select  p.UniqueID, p.EpicDocumentation, d.title, p.Abbreviation from  epicreportlibrary.dbo.report_Processed p &#10;inner join epicreportlibrary.dbo.report_epicrecordlist l on isnumeric(p.uniqueID)=1 and l.uniqueid=p.uniqueid&#10;inner join epicreportlibrary.dbo.report_epicdatahandbook d on d.reportid=l.reportid) p on isnumeric(p.uniqueid)=1 and ((cast(p.uniqueid as numeric)= r.epicrecordid and p.Abbreviation=r.EpicMasterFile) or r.name =p.title)&#10;where ((r.EpicMasterFile='HGR' and EpicRecordID&lt;100000)&#10;&#9;or (r.EpicMasterFile='IDM' and EpicRecordID&lt;100000)&#10;&#9;or (r.EpicMasterFile='IDB' and EpicRecordID&lt;100000)&#10;&#9;or (r.EpicMasterFile='IDK' and EpicRecordID&lt;1000000))&#10;;&#10;&#10;update r &#10;set RepositoryDescription = p.EpicDocumentation&#10;from dbo.ReportObject r&#10;inner join (&#10;&#9;select p.uniqueid, d.title, p.EpicDocumentation, p.Abbreviation&#10;&#9;from epicreportlibrary.dbo.metric_Processed p&#10;&#9;  inner join epicreportlibrary.dbo.Metric_EpicDataHandbook d on isnumeric(p.uniqueID)=1 and d.IDNRecordID=p.uniqueid&#10;&#9;  ) p on isnumeric(p.uniqueid)=1 and ((cast(p.uniqueid as numeric)= r.epicrecordid and p.Abbreviation=r.EpicMasterFile) or r.name =p.title)&#10;&#10;where r.EpicMasterFile='IDN' and EpicRecordID&lt;1000000 -- metric only&#10;;"/>
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable DTS:refId="Package\Update Repo Images" DTS:CreationName="Microsoft.ExecuteSQLTask" DTS:DelayValidation="True" DTS:Description="Execute SQL Task" DTS:DTSID="{ed9af19e-ded7-426f-b463-350a634746da}" DTS:ExecutableType="Microsoft.ExecuteSQLTask" DTS:LocaleID="-1" DTS:ObjectName="Update Repo Images" DTS:ThreadHint="0" DTS:Disabled="True">
      <DTS:Variables/>
      <DTS:ObjectData>
        <SQLTask:SqlTaskData xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" SQLTask:Connection="{6C78DD55-6FB2-44EC-BCBF-01010FE5BF03}" SQLTask:SqlStatementSource="delete from app.ReportObjectImages_doc  where ImageSource = 'Report Repository'&#10;&#10;insert into app.ReportObjectImages_doc (ReportObjectID, ImageData, ImageSource)&#10;&#10;select &#10;r.ReportObjectID, &#10;image,&#10;'Report Repository'&#10;from dbo.ReportObject r&#10;inner join (select cast(p.uniqueid as numeric) as uniqueid, p.abbreviation,  CONVERT(varbinary(MAX),CAST('' AS XML).value('xs:base64Binary(sql:column(&quot;image&quot;))', 'VARBINARY(MAX)')) as image&#10;&#9;&#9;&#9;from epicreportlibrary.dbo.Report_EpicRecordList p&#10;&#9;&#9;&#9;inner join (select replace(image, 'data:image/png;base64,','') as image, reportid from epicreportlibrary.dbo.Report_Images) i on p.ReportID = i.ReportID and ISNUMERIC(p.uniqueid) = 1)  p&#10;&#9;&#9;&#9;on  p.uniqueid =r.epicrecordid and p.Abbreviation=r.EpicMasterFile&#10;where EpicReleased = 'Y'&#10;and  image is not null&#10;;&#10;"/>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint]" DTS:CreationName="" DTS:DTSID="{C43A112F-A108-4013-94FE-558EA8119411}" DTS:From="Package\Merge Report Types" DTS:LogicalAnd="True" DTS:ObjectName="Constraint" DTS:To="Package\Merge Report Tags"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 1]" DTS:CreationName="" DTS:DTSID="{CD02CC28-BC06-435A-AB32-D0807F87524C}" DTS:From="Package\Merge Report Tags" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 1" DTS:To="Package\Merge Reports"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 10]" DTS:CreationName="" DTS:DTSID="{9DB81CA2-5A08-4A57-801D-8AF27A9255E6}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 10" DTS:To="Package\Merge Report Groups"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 11]" DTS:CreationName="" DTS:DTSID="{1D0C7428-F69B-4D8C-9F52-E105CBD30196}" DTS:From="Package\Add Index" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 11" DTS:To="Package\Clean Users"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 12]" DTS:CreationName="" DTS:DTSID="{8C1546A2-EF82-41E4-BD75-96219B7E8794}" DTS:From="Package\EpicReleased" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 12" DTS:To="Package\Update Repo Images"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 2]" DTS:CreationName="" DTS:DTSID="{C7A99B12-D5B6-48BA-9BB7-7A6F97483C5D}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 2" DTS:To="Package\Merge Report Tag Memberships"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 22]" DTS:CreationName="" DTS:DTSID="{F4C115F0-E229-4666-850F-3D877891F83A}" DTS:From="Package\Update Repo Description" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 22" DTS:To="Package\EpicReleased"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 29]" DTS:CreationName="" DTS:DTSID="{60A1A6EE-1393-4752-A1F8-C9F0B507AD39}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 29" DTS:To="Package\Merge Queries"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 3]" DTS:CreationName="" DTS:DTSID="{7942411B-5C70-4168-B179-D7E26BF2EFD1}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 3" DTS:To="Package\Merge Report Parameters"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 35]" DTS:CreationName="" DTS:DTSID="{0C84D2BC-C314-4DB1-BCEB-466397F2DE40}" DTS:From="Package\Merge Users" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 35" DTS:To="Package\Merge Groups"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 39]" DTS:CreationName="" DTS:DTSID="{0D3B9054-16D3-4DB8-B03B-5AD6B50BE710}" DTS:From="Package\Merge Groups" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 39" DTS:To="Package\Merge Report Types"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 4]" DTS:CreationName="" DTS:DTSID="{3D1637DD-347B-4DAC-90CE-55FAE4CC4B5F}" DTS:From="Package\Hide Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 4" DTS:To="Package\Cubes Run Link"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 41]" DTS:CreationName="" DTS:DTSID="{D59171F6-187F-4300-97A3-E843EB253CD0}" DTS:From="Package\EpicReleased" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 41" DTS:To="Package\Update Certification Tag"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 42]" DTS:CreationName="" DTS:DTSID="{646B3420-2E55-4B0F-BDD8-993CBE6E6374}" DTS:From="Package\Update Certification Tag" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 42" DTS:To="Package\Hide Reports"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 5]" DTS:CreationName="" DTS:DTSID="{15A33BEB-BE67-4645-BF5D-A60A964EC06B}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 5" DTS:To="Package\Merge Attachments"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 6]" DTS:CreationName="" DTS:DTSID="{77A490A5-81E7-42FB-8039-CE587DBFB694}" DTS:From="Package\Clean Users" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 6" DTS:To="Package\Merge Users"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 7]" DTS:CreationName="" DTS:DTSID="{64E8DDB9-6DAF-45FB-A1EF-53D1DAAF6A7D}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 7" DTS:To="Package\Merge Subscriptions"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 8]" DTS:CreationName="" DTS:DTSID="{683B4FEE-15C1-4B27-B62E-83EF673AE511}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 8" DTS:To="Package\Merge Hierarchies"/>
    <DTS:PrecedenceConstraint DTS:refId="Package.PrecedenceConstraints[Constraint 9]" DTS:CreationName="" DTS:DTSID="{01D1F06B-89F0-4F36-9DA1-F47DB720CC29}" DTS:From="Package\Merge Reports" DTS:LogicalAnd="True" DTS:ObjectName="Constraint 9" DTS:To="Package\Update Repo Description"/>
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties>&lt;?xml version="1.0"?&gt;
&lt;!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.--&gt;
&lt;!--If you manually edit this section and make a mistake, you can delete it. --&gt;
&lt;!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.--&gt;
&lt;Objects
  Version="8"&gt;
  &lt;!--Each node below will contain properties that do not affect runtime behavior.--&gt;
  &lt;Package
    design-time-name="Package"&gt;
    &lt;LayoutInfo&gt;
      &lt;GraphLayout
        Capacity="64" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssge="clr-namespace:Microsoft.SqlServer.Graph.Extended;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation"&gt;
        &lt;NodeLayout
          Size="128,42"
          Id="Package\Add Index"
          TopLeft="462,13" /&gt;
        &lt;NodeLayout
          Size="139,42"
          Id="Package\Clean Users"
          TopLeft="627.708364592659,11.2666707854801" /&gt;
        &lt;NodeLayout
          Size="157,42"
          Id="Package\Cubes Run Link"
          TopLeft="611.708364592659,1019.26667078548" /&gt;
        &lt;NodeLayout
          Size="156,42"
          Id="Package\EpicReleased"
          TopLeft="611.66666451428,758.63334200488" /&gt;
        &lt;NodeLayout
          Size="143,42"
          Id="Package\Hide Reports"
          TopLeft="620.333331214057,931.26667078548" /&gt;
        &lt;NodeLayout
          Size="174,42"
          Id="Package\Merge Attachments"
          TopLeft="910.708364592659,540.26667078548" /&gt;
        &lt;NodeLayout
          Size="149,42"
          Id="Package\Merge Groups"
          TopLeft="635,166" /&gt;
        &lt;NodeLayout
          Size="169,42"
          Id="Package\Merge Hierarchies"
          TopLeft="342.374996026358,817.83333760368" /&gt;
        &lt;NodeLayout
          Size="152,42"
          Id="Package\Merge Queries"
          TopLeft="914.499965429308,452.57229916271" /&gt;
        &lt;NodeLayout
          Size="185,42"
          Id="Package\Merge Report Groups"
          TopLeft="84.708364592659,549.13333776898" /&gt;
        &lt;NodeLayout
          Size="206,42"
          Id="Package\Merge Report Parameters"
          TopLeft="194.708364592659,712.26667078548" /&gt;
        &lt;NodeLayout
          Size="237,42"
          Id="Package\Merge Report Tag Memberships"
          TopLeft="108,628" /&gt;
        &lt;NodeLayout
          Size="173,42"
          Id="Package\Merge Report Tags"
          TopLeft="618.708364592659,331.26667078548" /&gt;
        &lt;NodeLayout
          Size="179,42"
          Id="Package\Merge Report Types"
          TopLeft="622.541659944588,239.30000357469" /&gt;
        &lt;NodeLayout
          Size="152,42"
          Id="Package\Merge Reports"
          TopLeft="598.874994834265,451.63333735572" /&gt;
        &lt;NodeLayout
          Size="179,42"
          Id="Package\Merge Subscriptions"
          TopLeft="92.833365784752,375.53333743837" /&gt;
        &lt;NodeLayout
          Size="142,42"
          Id="Package\Merge Users"
          TopLeft="634,97" /&gt;
        &lt;NodeLayout
          Size="198,42"
          Id="Package\Update Certification Tag"
          TopLeft="591,849" /&gt;
        &lt;NodeLayout
          Size="202,42"
          Id="Package\Update Repo Description"
          TopLeft="584.5,686.5" /&gt;
        &lt;NodeLayout
          Size="183,42"
          Id="Package\Update Repo Images"
          TopLeft="836,758" /&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="708.625012268624,281.30000357469"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,49.96666721079"
              Start="0,0"
              End="0,42.46666721079"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,42.46666721079" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 1]"
          TopLeft="702.041679713462,373.26667078548"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,78.36666657024"
              Start="0,0"
              End="0,70.86666657024"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,70.86666657024" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 10]"
          TopLeft="650.874994834265,493.63333735572"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-473.666630241606,55.50000041326"
              Start="0,0"
              End="-473.666630241606,48.00000041326"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,18.5468751678869" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="0,18.5468751678869"
                    Point2="0,22.5468751678869"
                    Point3="-4,22.5468751678869" /&gt;
                  &lt;mssgle:LineSegment
                    End="-469.666630241606,22.5468751678869" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="-469.666630241606,22.5468751678869"
                    Point2="-473.666630241606,22.5468751678869"
                    Point3="-473.666630241606,26.5468751678869" /&gt;
                  &lt;mssgle:LineSegment
                    End="-473.666630241606,48.00000041326" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 11]"
          TopLeft="590,33.1333353927401"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="37.708364592659,0"
              Start="0,0"
              End="30.208364592659,0"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="30.208364592659,0" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 12]"
          TopLeft="767.66666451428,779.31667100244"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="68.33333548572,0"
              Start="0,0"
              End="60.83333548572,0"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="60.83333548572,0" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 2]"
          TopLeft="644.017851977122,493.63333735572"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-417.517851977122,134.36666264428"
              Start="0,0"
              End="-417.517851977122,126.86666264428"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,46.0705959853685" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="0,46.0705959853685"
                    Point2="0,50.0705959853685"
                    Point3="-4,50.0705959853685" /&gt;
                  &lt;mssgle:LineSegment
                    End="-413.517851977122,50.0705959853685" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="-413.517851977122,50.0705959853685"
                    Point2="-417.517851977122,50.0705959853685"
                    Point3="-417.517851977122,54.0705959853685" /&gt;
                  &lt;mssgle:LineSegment
                    End="-417.517851977122,126.86666264428" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 22]"
          TopLeft="687.58333225714,728.5"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,30.13334200488"
              Start="0,0"
              End="0,22.63334200488"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,22.63334200488" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 29]"
          TopLeft="750.874994834265,473.102818259215"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="163.624970595043,0"
              Start="0,0"
              End="156.124970595043,0"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="156.124970595043,0" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 3]"
          TopLeft="664.589280548551,493.63333735572"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-366.880915955892,218.63333342976"
              Start="0,0"
              End="-366.880915955892,211.13333342976"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,97.3823925178322" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="0,97.3823925178322"
                    Point2="0,101.382392517832"
                    Point3="-4,101.382392517832" /&gt;
                  &lt;mssgle:LineSegment
                    End="-362.880915955892,101.382392517832" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="-362.880915955892,101.382392517832"
                    Point2="-366.880915955892,101.382392517832"
                    Point3="-366.880915955892,105.382392517832" /&gt;
                  &lt;mssgle:LineSegment
                    End="-366.880915955892,211.13333342976" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 35]"
          TopLeft="707.25,139"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,27"
              Start="0,0"
              End="0,19.5"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,19.5" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 39]"
          TopLeft="710.770829972294,208"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,31.30000357469"
              Start="0,0"
              End="0,23.80000357469"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,23.80000357469" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 4]"
          TopLeft="691.020847903358,973.26667078548"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,46"
              Start="0,0"
              End="0,38.5"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,38.5" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 41]"
          TopLeft="689.83333225714,800.63334200488"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,48.36665799512"
              Start="0,0"
              End="0,40.86665799512"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,40.86665799512" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 42]"
          TopLeft="690.916665607029,891"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,40.2666707854801"
              Start="0,0"
              End="0,32.7666707854801"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,32.7666707854801" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 5]"
          TopLeft="710.874994834265,493.63333735572"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="286.833369758394,46.6333334297601"
              Start="0,0"
              End="286.833369758394,39.1333334297601"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,12.0804598033655" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="0,12.0804598033655"
                    Point2="0,16.0804598033655"
                    Point3="4,16.0804598033655" /&gt;
                  &lt;mssgle:LineSegment
                    End="282.833369758394,16.0804598033655" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="282.833369758394,16.0804598033655"
                    Point2="286.833369758394,16.0804598033655"
                    Point3="286.833369758394,20.0804598033655" /&gt;
                  &lt;mssgle:LineSegment
                    End="286.833369758394,39.1333334297601" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 6]"
          TopLeft="701.10418229633,53.2666707854801"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,43.7333292145199"
              Start="0,0"
              End="0,36.2333292145199"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,36.2333292145199" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 7]"
          TopLeft="650.874994834265,451.63333735572"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-468.541629049513,-34.09999991735"
              Start="0,0"
              End="-468.541629049513,-26.59999991735"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,-9.85312496642345" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="0,-9.85312496642345"
                    Point2="0,-13.8531249664235"
                    Point3="-4,-13.8531249664235" /&gt;
                  &lt;mssgle:LineSegment
                    End="-464.541629049513,-13.8531249664235" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="-464.541629049513,-13.8531249664235"
                    Point2="-468.541629049513,-13.8531249664235"
                    Point3="-468.541629049513,-17.8531249664235" /&gt;
                  &lt;mssgle:LineSegment
                    End="-468.541629049513,-26.59999991735" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 8]"
          TopLeft="698.874994834265,493.63333735572"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-271.999998807907,324.20000024796"
              Start="0,0"
              End="-271.999998807907,316.70000024796"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,127.706250100734" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="0,127.706250100734"
                    Point2="0,131.706250100734"
                    Point3="-4,131.706250100734" /&gt;
                  &lt;mssgle:LineSegment
                    End="-267.999998807907,131.706250100734" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="-267.999998807907,131.706250100734"
                    Point2="-271.999998807907,131.706250100734"
                    Point3="-271.999998807907,135.706250100734" /&gt;
                  &lt;mssgle:LineSegment
                    End="-271.999998807907,316.70000024796" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint 9]"
          TopLeft="705.732137691408,493.63333735572"&gt;
          &lt;EdgeLayout.Curve&gt;
            &lt;mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-20.2321376914078,192.86666264428"
              Start="0,0"
              End="-20.2321376914078,185.36666264428"&gt;
              &lt;mssgle:Curve.Segments&gt;
                &lt;mssgle:SegmentCollection
                  Capacity="5"&gt;
                  &lt;mssgle:LineSegment
                    End="0,67.8701242872552" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="0,67.8701242872552"
                    Point2="0,71.8701242872552"
                    Point3="-4,71.8701242872552" /&gt;
                  &lt;mssgle:LineSegment
                    End="-16.2321376914078,71.8701242872552" /&gt;
                  &lt;mssgle:CubicBezierSegment
                    Point1="-16.2321376914078,71.8701242872552"
                    Point2="-20.2321376914078,71.8701242872552"
                    Point3="-20.2321376914078,75.8701242872552" /&gt;
                  &lt;mssgle:LineSegment
                    End="-20.2321376914078,185.36666264428" /&gt;
                &lt;/mssgle:SegmentCollection&gt;
              &lt;/mssgle:Curve.Segments&gt;
            &lt;/mssgle:Curve&gt;
          &lt;/EdgeLayout.Curve&gt;
          &lt;EdgeLayout.Labels&gt;
            &lt;EdgeLabelCollection /&gt;
          &lt;/EdgeLayout.Labels&gt;
        &lt;/EdgeLayout&gt;
        &lt;AnnotationLayout
          Text="^!Execute SQL tasks use package parameters for atlas database and atlas_staging database (Connection intitial catalog and SQL are affected)!"
          ParentId="Package"
          Size="1053,41"
          Id="034aa3be-57d9-4336-b5d2-ee936d124d58"
          TopLeft="1202.99999711911,110"&gt;
          &lt;AnnotationLayout.FontInfo&gt;
            &lt;mssge:FontInfo
              Family="Tahoma"
              Size="14.25"
              Color="#FFFFFFFF"
              Weight="Bold"&gt;
              &lt;mssge:FontInfo.TextDecorations&gt;
                &lt;av:TextDecorationCollection /&gt;
              &lt;/mssge:FontInfo.TextDecorations&gt;
            &lt;/mssge:FontInfo&gt;
          &lt;/AnnotationLayout.FontInfo&gt;
        &lt;/AnnotationLayout&gt;
        &lt;AnnotationLayout
          Text="  Atlas of Information Management business intelligence library and documentation database.&amp;#xA;  Copyright (C) 2020  Riverside Healthcare, Kankakee, IL&amp;#xA;&amp;#xA;  This program is free software: you can redistribute it and/or modify&amp;#xA;  it under the terms of the GNU General Public License as published by&amp;#xA;  the Free Software Foundation, either version 3 of the License, or&amp;#xA;  (at your option) any later version.&amp;#xA;&amp;#xA;  This program is distributed in the hope that it will be useful,&amp;#xA;  but WITHOUT ANY WARRANTY; without even the implied warranty of&amp;#xA;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&amp;#xA;  GNU General Public License for more details.&amp;#xA;&amp;#xA;  You should have received a copy of the GNU General Public License&amp;#xA;  along with this program.  If not, see &amp;lt;https://www.gnu.org/licenses/&amp;gt;."
          ParentId="Package"
          Size="702,282"
          Id="3620a276-7915-42d4-9893-8c3f6af30781"
          TopLeft="1393.33333041933,267.733332210647"&gt;
          &lt;AnnotationLayout.FontInfo&gt;
            &lt;mssge:FontInfo
              Family="Tahoma"
              Size="14.25"
              Color="#FFFFFFFF"
              Weight="Bold"&gt;
              &lt;mssge:FontInfo.TextDecorations&gt;
                &lt;av:TextDecorationCollection /&gt;
              &lt;/mssge:FontInfo.TextDecorations&gt;
            &lt;/mssge:FontInfo&gt;
          &lt;/AnnotationLayout.FontInfo&gt;
        &lt;/AnnotationLayout&gt;
      &lt;/GraphLayout&gt;
    &lt;/LayoutInfo&gt;
  &lt;/Package&gt;
&lt;/Objects&gt;</DTS:DesignTimeProperties>
</DTS:Executable>
